from telethon.errors import UserIdInvalidError
from .. import loader, utils

@loader.tds
class UserByID(loader.Module):
    """–í—ã–¥–∞—ë—Ç username –∏ tg-—Å—Å—ã–ª–∫—É –ø–æ ID"""
    strings = {"name": "UserByID"}

    @loader.command()
    async def getuser(self, message):
        """<id> ‚Äî –ü–æ–ª—É—á–∏—Ç—å username –∏ —Å—Å—ã–ª–∫—É –ø–æ ID"""
        args = utils.get_args(message)
        if not args:
            return await message.edit("–£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

        try:
            user_id = int(args[0])
        except ValueError:
            return await message.edit("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

        try:
            user = await message.client.get_entity(user_id)
            username = f"@{user.username}" if user.username else "None"
            forever_link = f"tg://openmessage?user_id={user_id}"

            result = (
                f"<blockquote>üë§–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</blockquote>\n"
                f"<blockquote>ü™™ID: {user_id}</blockquote>\n"
                f"<blockquote>üåêUsername: {username}</blockquote>\n"
                f"<blockquote>üîçForever Link: <a href=\"{forever_link}\">Click</a></blockquote>"
            )

            await message.edit(result, parse_mode="html")
        except UserIdInvalidError:
            await message.edit("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except Exception as e:
            await message.edit(f"–û—à–∏–±–∫–∞: {e}")
